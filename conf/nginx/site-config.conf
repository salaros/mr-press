# Redirect www to no-www
server {
    server_name	www.example.org www.test.example.org;
    return		301 $scheme://example.org$request_uri;
}

server {
    listen		80;
    server_name	example.org test.example.org;

    set $root_dir /var/www/example.org;
    root $root_dir/public;

    proxy_buffering off;
    fastcgi_buffers 16 16k;
    fastcgi_buffer_size 32k;

    access_log off;
    # error_log logs/example.org-error.log;

    index index.php;

    # Security-related restrictions
    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
        expires 0;
        sendfile  off;
        rewrite ^ /index.php;
    }

    # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).
    # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Deny access to any files with a .php extension in the uploads directory
    # Works in sub-directory installs and also in multisite network
    # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
    location ~* /(?:uploads|files)/.*\.php$ {
        deny all;
    }

    # This order might seem weird - this is attempted to match last if rules below fail.
    # http://wiki.nginx.org/HttpCoreModule
    location / {
        # This is cool because no php is touched for static content.
        # include the "?$args" part so non-default permalinks doesn't break when using query string
        try_files $uri $uri/ /index.php?$args;
    }

    # Add trailing slash to */wp-admin requests.
    rewrite /wp-admin$ $scheme://$host$uri/ permanent;

    # Uncomment one of the lines below for the appropriate caching plugin (if used).
    #include global/wordpress-wp-super-cache.conf;
    #include global/wordpress-w3-total-cache.conf;

    # Pass all .php files onto a php-fpm/php-fcgi server.
    location ~ [^/]\.php(/|$) {
        fastcgi_split_path_info ^(.+?\.php)(/.*)$;
        if (!-f $document_root$fastcgi_script_name) {
            return 404;
        }
        # This is a robust solution for path info security issue and works with "cgi.fix_pathinfo = 1" in /etc/php.ini (default)

        include fastcgi.conf;
        fastcgi_index index.php;
    #   fastcgi_intercept_errors on;
    #   fastcgi_pass unix:/var/run/php5-fpm.sock;
    #   fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;
    #   fastcgi_pass unix:/var/run/php/php7.1-fpm.sock;
        fastcgi_pass 127.0.0.1:9000;
        fastcgi_param PATH_INFO $fastcgi_script_name;
        fastcgi_read_timeout 300;
        fastcgi_param PHP_VALUE "
            max_execution_time=300
            memory_limit=256M
            realpath_cache_size=64K
            upload_max_filesize=32M
            post_max_size=32M
        ";
    }

    location /wp-includes/ {
        autoindex off;
    }

    location /wp-content/ {
        root $root_dir;
        autoindex off;
    }
}
